From ccdc3ed141a3a0e3f4e7b45a4c9ca6949f900068 Mon Sep 17 00:00:00 2001
From: Nathan Kinder <nkinder@redhat.com>
Date: Fri, 20 Mar 2015 14:44:29 -0700
Subject: [PATCH] Lookup identity provider by remote_id for websso

When using the websso feature in keystone, the identity provider is
looked up based on the value of the 'remote_id_attribute' environment
variable provided by the SAML assertion (or claim in the case of OpenID
Connect). Logic would dictate that the 'remote_id_attribute' value is
searched for against the 'remote_id' field in the backend where identity
providers are stored. Instead, we are doing the lookup against the 'id'
field.

This patch makes the websso code look the identity provider up by the
remote ID.

Change-Id: I1dc666782929902a3a4f478baef2b729757b0dc5
Closes-Bug: 1434701
---
 keystone/contrib/federation/backends/sql.py | 13 +++++++++++++
 keystone/contrib/federation/controllers.py  |  5 ++++-
 keystone/contrib/federation/core.py         |  9 +++++++++
 3 files changed, 26 insertions(+), 1 deletion(-)

diff --git a/keystone/contrib/federation/backends/sql.py b/keystone/contrib/federation/backends/sql.py
index 1c9da98..f67feaa 100644
--- a/keystone/contrib/federation/backends/sql.py
+++ b/keystone/contrib/federation/backends/sql.py
@@ -132,6 +132,14 @@ class Federation(core.Driver):
             raise exception.IdentityProviderNotFound(idp_id=idp_id)
         return idp_ref
 
+    def _get_idp_from_remote_id(self, session, remote_id):
+        q = session.query(IdentityProviderModel)
+        q = q.filter_by(remote_id=remote_id)
+        try:
+            return q.one()
+        except sql.NotFound:
+            raise exception.IdentityProviderNotFound(idp_id=remote_id)
+
     def list_idps(self):
         with sql.transaction() as session:
             idps = session.query(IdentityProviderModel)
@@ -143,6 +151,11 @@ class Federation(core.Driver):
             idp_ref = self._get_idp(session, idp_id)
         return idp_ref.to_dict()
 
+    def get_idp_from_remote_id(self, remote_id):
+        with sql.transaction() as session:
+            idp_ref = self._get_idp_from_remote_id(session, remote_id)
+        return idp_ref.to_dict()
+
     def update_idp(self, idp_id, idp):
         with sql.transaction() as session:
             idp_ref = self._get_idp(session, idp_id)
diff --git a/keystone/contrib/federation/controllers.py b/keystone/contrib/federation/controllers.py
index c10fc7c..a100036 100644
--- a/keystone/contrib/federation/controllers.py
+++ b/keystone/contrib/federation/controllers.py
@@ -269,12 +269,15 @@ class Auth(auth_controllers.Auth):
     def federated_sso_auth(self, context, protocol_id):
         try:
             remote_id_name = CONF.federation.remote_id_attribute
-            identity_provider = context['environment'][remote_id_name]
+            remote_id = context['environment'][remote_id_name]
         except KeyError:
             msg = _('Missing entity ID from environment')
             LOG.error(msg)
             raise exception.Unauthorized(msg)
 
+        ref = self.federation_api.get_idp_from_remote_id(remote_id)
+        identity_provider = ref['id']
+
         if 'origin' in context['query_string']:
             origin = context['query_string'].get('origin')
             host = urllib.parse.unquote_plus(origin)
diff --git a/keystone/contrib/federation/core.py b/keystone/contrib/federation/core.py
index dce57c3..b596cff 100644
--- a/keystone/contrib/federation/core.py
+++ b/keystone/contrib/federation/core.py
@@ -125,6 +125,15 @@ class Driver(object):
         raise exception.NotImplemented()  # pragma: no cover
 
     @abc.abstractmethod
+    def get_idp_from_remote_id(self, remote_id):
+        """Get an identity provider by remote ID.
+
+        :raises: keystone.exception.IdentityProviderNotFound
+
+        """
+        raise exception.NotImplemented()  # pragma: no cover
+
+    @abc.abstractmethod
     def update_idp(self, idp_id, idp):
         """Update an identity provider by ID.
 
-- 
1.9.3

